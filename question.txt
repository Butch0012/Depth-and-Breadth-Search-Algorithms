More challenging: Try writing recursive versions of your DFS and BFS algorithms.
Difficult: Write a Graph.prototype.shortestPath() method to determine the shortest path between one node and another. The method should return the path (the nodes traversed) to get from the starting node to the targeted node.
Make the edges weighted. Each edge should now have a value associated with it that represents the distance between the two nodes. To do this, create an Edge class. Each instantiated edge should have a distance property. When calculating the shortest path, your Graph.prototype.shortestPath() method should take into account these distances.
Finally, create a Graph.prototype.allPaths() method that returns all paths - similar to what we might see with an application like Google Maps. Once again, this should return the paths between the starting node and the target node. The difference is that all the potential paths can be returned. Sort these paths from shortest to longest.